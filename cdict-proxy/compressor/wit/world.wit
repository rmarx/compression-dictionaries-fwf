package component:compressor;

world cmprsn {
    export compress;
}

interface compress {
  resource compressor {
    /// The constructor for the compressor resource takes the compression level
    /// and the path to load the dictionary from disk.
    constructor(level: u8, dict: string);

    /// Receive bytes, write them into the encoder, flush, and
    /// return newly produced compressed bytes (since last call).
    add-bytes: func(input: list<u8>) -> list<u8>;

    /// Finish compression and return the final block of compressed bytes.
    /// After calling this, you cannot call `add_bytes` again.
    finish: func() -> list<u8>;
  }
}

